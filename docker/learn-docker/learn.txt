Dockerfile

Dockerfile is a text document that contains all the commands a user could call on the command line to
assemble an image. Using the docker build, users can create an automated build that executes several
command line instructions in succession.

It depends on some predefined Keywords that has a significant meaning defined by Docker for creating Docker applications

FROM --> 
This keyword is used to define the base image , on while we will be building the application.
(FROM ubuntu:latest)

Parent Image vs Base Image

COPY
COPY  <source> <destination in container> { no remote download }

ADD
The
ADD keyword is used to add files to the container being built. The
syntax used is:
ADD <source> <destination in container> { also work for remote place and download }

RUN
The RUN keyword is used to add layers to the base image,
by installing components. Each RUN statement adds a new layer to the docker image. 
RUN apt-get update

ENV
ENV is the keyword that is used to define application specific environment variables in the 
container runtime. eg: ENV DB_HOST=database address,

EXPOSE Portnumber --> It helps us to define which port we want our container to receive the traffic.

MAKEDIR app --> creating a directory inside your container
WORKDIR app --> change directory 


CMD 
It is a keyword that is used to run commands to start the application inside the container during
its initial start. ( app.jar --> java app.jar // python app.py)


ENTRYPOINT
It is generally used to run commands , the moment the container initializes  along with multiple arguments.
( java app.jar --xms 1GB)

ARGS
It is a keyword that is used to define variables on ur Dockerfile.


==========================================================================

1. Dockerfile
2. docker build . --tag imagename   ---> This will build or crete a Docker image.
3. docker run imagename  --> This will give ur image a life in form of Docker containers and start running the application.

================================================================


5 container....
docker run (5 times.)

----

Docker-Compose  ( This is a tool that can help us to deploy containers at scale)

* This can be controlled via the YAMLs.

docker run --name nginxc -it -d  -p 8080:80 nginx

version: '3' (optional field)
services:  -- stands for holding the entire stack of  the containers list
  container 1:
    image: app:v1
    ports:
    - "8085:80"
    name: nginx4
    command : 
  container 2:
    image: image:v2
    ports:
    - "8084:80"
    env:
    - email: akas@gmail.command
    - config: test
    volumes:
    - db_data:/app
    restart:  always

==========

docker-compose.yml

docker-compose up/down -d ---> Only One command to start,stop, restart all containers
